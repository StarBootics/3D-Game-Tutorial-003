; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
; AUTOMATICALLY GENERATED CODE, DO NOT MODIFY
; UNLESS YOU REALLY, REALLY, REALLY MEAN IT !!
; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
; Code generated by : Dev-Object - V2.0.0 Beta 7
; Project name : OpenGL 3D Game Tutorial
; File name : TorusBuilder.pbi
; File Version : 1.0.0
; Programmation : In progress
; Programmed by : Guillaume Saumure
; AKA : StarBootics
; E-mail : gsaumure@cgocable.ca
; Creation Date : July 30th, 2022
; Last update : July 30th, 2022
; Coded for PureBasic : V6.00 LTS
; Platform : Windows, Linux, MacOS X
; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
; The MIT License (MIT)
; 
; Copyright (c) 2022 Guillaume Saumure
; 
; Permission is hereby granted, free of charge, to any person obtaining a copy of this software and 
; associated documentation files (the "Software"), to deal in the Software without restriction, including 
; without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
; copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the 
; following conditions:
; 
; The above copyright notice and this permission notice shall be included in all copies or substantial 
; portions of the Software.
; 
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT 
; LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO 
; EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER 
; IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
; THE USE OR OTHER DEALINGS IN THE SOFTWARE.
; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

DeclareModule TorusBuilder
  
  Interface TorusBuilder
    
    SetMajorRadius(MajorRadius.f)
    SetMinorRadius(MinorRadius.f)
    SetUSections(USections.l)
    SetVSections(VSections.l)
    Built.i()
    Free()
    
  EndInterface
  
  Declare.i New(MajorRadius.f = 5.0, MinorRadius.f = 1.0, USections.l = 32, VSections.l = 16)
  
EndDeclareModule

Module TorusBuilder
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< Structure declaration <<<<<

  Structure Private_Members
    
    VirtualTable.i
    MajorRadius.f
    MinorRadius.f
    USections.l
    VSections.l
    
  EndStructure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< Helper Macro <<<<<
  
  Macro LinearlySpacedValue(IncrementID, IncrementMax, MinValue, MaxValue)
    
     ((MinValue) + ((MaxValue) - (MinValue)) * ((IncrementID) / (IncrementMax)))
  
  EndMacro
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The mutators <<<<<

  Procedure SetMajorRadius(*This.Private_Members, MajorRadius.f)
    
    *This\MajorRadius = MajorRadius
    
  EndProcedure
  
  Procedure SetMinorRadius(*This.Private_Members, MinorRadius.f)
    
    *This\MinorRadius = MinorRadius
    
  EndProcedure
  
  Procedure SetUSections(*This.Private_Members, USections.l)
    
    *This\USections = USections
    
  EndProcedure
  
  Procedure SetVSections(*This.Private_Members, VSections.l)
    
    *This\VSections = VSections
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Built operator <<<<<
  
  Procedure.i Built(*This.Private_Members)
    
    *Mesh.Mesh::Mesh = Mesh::New()
    *Mesh\SetName("Torus")
    
    For UID = 0 To *This\USections
      
      U0.f = LinearlySpacedValue(UID, *This\USections, 0.0, 2.0 * #PI)
      CU0.f = Cos(U0)
      SU0.f = Sin(U0)
      
      For VID = 0 To *This\VSections
        
        V0.f = LinearlySpacedValue(VID, *This\VSections, 0.0, 2.0 * #PI)
        CV0.f = Cos(V0)
        SV0.f = Sin(V0)
        
        Px.f = (*This\MajorRadius + *This\MinorRadius * CV0) * CU0
        Py.f = *This\MinorRadius * SV0
        Pz.f = (*This\MajorRadius + *This\MinorRadius * CV0) * SU0
        
        Nx.f = CV0 * CU0
        Ny.f = SV0
        Nz.f = CV0 * SU0
        
        Tx.f = -1.0 * (*This\MajorRadius + *This\MinorRadius * CV0) * SU0
        Ty.f = 0.0
        Tz.f = (*This\MajorRadius + *This\MinorRadius * CV0) * CU0
        
        U.f = U0 / (2.0 * #PI)
        V.f = V0 / (2.0 * #PI)
        
        *Mesh\AddVerticesEx(Vertex::New(Vector3f::New(Px, Py, Pz), Vector3f::New(Nx, Ny, Nz), Vector3f::New(Tx, Ty, Tz), Vector2f::New(U, V)))

      Next

    Next
    
    For VerticalIt = 0 To *This\USections - 1
      For HorizontalIt = 0 To *This\VSections - 1
        
        TL.l = HorizontalIt + VerticalIt * (*This\VSections + 1)
        TR.l = (HorizontalIt + 1) + VerticalIt * (*This\VSections + 1)
        BL.l = HorizontalIt + (VerticalIt+1) * (*This\VSections + 1)
        BR.l = (HorizontalIt + 1) + (VerticalIt+1) * (*This\VSections + 1)
        
        *Mesh\AddIndicesEx(Indice3::New(TL, TR, BL))
        *Mesh\AddIndicesEx(Indice3::New(TR, BR, BL))
        
      Next
    Next

    ProcedureReturn *Mesh
  EndProcedure
 
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Destructor <<<<<

  Procedure Free(*This.Private_Members)
    
    FreeStructure(*This)
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Constructor <<<<<

  Procedure.i New(MajorRadius.f = 5.0, MinorRadius.f = 1.0, USections.l = 32, VSections.l = 16)
    
    *This.Private_Members = AllocateStructure(Private_Members)
    *This\VirtualTable = ?START_METHODS
    
    *This\MajorRadius = MajorRadius
    *This\MinorRadius = MinorRadius
    *This\USections = USections
    *This\VSections = VSections
    
    ProcedureReturn *This
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Virtual Table Entries <<<<<

  DataSection
    START_METHODS:
    Data.i @SetMajorRadius()
    Data.i @SetMinorRadius()
    Data.i @SetUSections()
    Data.i @SetVSections()
    Data.i @Built()
    Data.i @Free()
    END_METHODS:
  EndDataSection
  
EndModule

; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
; <<<<< Code generated in : 00.001 seconds (138000.00 lines/second) <<<<<
; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

; <<<<<<<<<<<<<<<<<<<<<<<
; <<<<< END OF FILE <<<<<
; <<<<<<<<<<<<<<<<<<<<<<<
; IDE Options = PureBasic 6.00 LTS (Linux - x64)
; Folding = ---
; EnableXP
; CompileSourceDirectory