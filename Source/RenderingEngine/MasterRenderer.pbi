; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
; AUTOMATICALLY GENERATED CODE, DO NOT MODIFY
; UNLESS YOU REALLY, REALLY, REALLY MEAN IT !!
; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
; Code generated by : Dev-Object - V2.0.0 Beta 7
; Project name : OpenGL 3D Game Tutorial
; File name : MasterRenderer.pbi
; File Version : 0.0.0
; Programmation : In progress
; Programmed by : Guillaume Saumure
; AKA : StarBootics
; E-mail : gsaumure@cgocable.ca
; Creation Date : July 29th, 2022
; Last update : July 29th, 2022
; Coded for PureBasic : V6.00 LTS
; Platform : Windows, Linux, MacOS X
; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
; The MIT License (MIT)
; 
; Copyright (c) 2022 Guillaume Saumure
; 
; Permission is hereby granted, free of charge, to any person obtaining a copy of this software and 
; associated documentation files (the "Software"), to deal in the Software without restriction, including 
; without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
; copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the 
; following conditions:
; 
; The above copyright notice and this permission notice shall be included in all copies or substantial 
; portions of the Software.
; 
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT 
; LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO 
; EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER 
; IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
; THE USE OR OTHER DEALINGS IN THE SOFTWARE.
; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

DeclareModule MasterRenderer
  
  Interface MasterRenderer
    
    GetPerspectiveMatrix.i()
    GetCamera.i()
    GetModels.i()
    GetTerrain.i()
    SetModels(*Models.Model::Model)
    AddModelsEx(*Models.Model::Model)
    SelectModels.i(Index.l)
    FirstModels.i()
    LastModels.i()
    PreviousModels.i()
    NextModels.i()
    DeleteModels()
    ResetModels()
    ClearModels()
    ModelsIndex.l()
    ModelsSize.l()
    
    RefreshPerspectiveMatrix(AspectRatio.f)
    Initialize()
    Render(*Entities.Entities::Entities)
    Free()
    
  EndInterface
  
  Declare.i New(AspectRatio.f, *GameFolderSystem.GameFolderSystem::GameFolderSystem)
  
EndDeclareModule

Module MasterRenderer
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< Constants declaration <<<<<
  
  #FOV = 60.0
  #NEAR_PLANE = 1.0
  #FAR_PLANE = 1000.0
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< Structure declaration <<<<<

  Structure Private_Members
    
    VirtualTable.i
    *GameFolderSystem.GameFolderSystem::GameFolderSystem
    PerspectiveMatrix.Matrix44f::Matrix44f
    Camera.Camera::Camera
    Light.Light::Light
    DefaultMaterial.Material::Material
    EntitiesBatches.EntitiesBatches::EntitiesBatches
    EntityRenderer.EntityRenderer::EntityRenderer
    TerrainRenderer.TerrainRenderer::TerrainRenderer
    
    List Models.Model::Model()
    
    HeightsGeneratorParams.HeightsGeneratorParams::HeightsGeneratorParams
    Terrain.Terrain::Terrain
    
  EndStructure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The observators <<<<<

  Procedure.i GetPerspectiveMatrix(*This.Private_Members)
    
    ProcedureReturn *This\PerspectiveMatrix
  EndProcedure
  
  Procedure.i GetCamera(*This.Private_Members)
    
    ProcedureReturn *This\Camera
  EndProcedure
  
  Procedure.i GetModels(*This.Private_Members)
    
    ProcedureReturn *This\Models()
  EndProcedure
  
  Procedure.i GetTerrain(*This.Private_Members)
  
    ProcedureReturn *This\Terrain
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The mutators <<<<<

  Procedure SetModels(*This.Private_Members, *Models.Model::Model)
    
    If *This\Models() <> #Null
      *This\Models()\Free()
    EndIf
    
    *This\Models() = *Models
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The AddEx to linked list operator(s) <<<<<

  Procedure AddModelsEx(*This.Private_Members, *Models.Model::Model)
    
    AddElement(*This\Models())
    *This\Models() = *Models
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Select in linked list operator(s) <<<<<

  Procedure.i SelectModels(*This.Private_Members, Index.l)
    
    ProcedureReturn SelectElement(*This\Models(), Index)
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The First element in linked list operator(s) <<<<<

  Procedure.i FirstModels(*This.Private_Members)
    
    ProcedureReturn FirstElement(*This\Models())
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Last element in linked list operator(s) <<<<<

  Procedure.i LastModels(*This.Private_Members)
    
    ProcedureReturn LastElement(*This\Models())
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Previous element in linked list operator(s) <<<<<

  Procedure.i PreviousModels(*This.Private_Members)
    
    ProcedureReturn PreviousElement(*This\Models())
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Next element in linked list operator(s) <<<<<

  Procedure.i NextModels(*This.Private_Members)
    
    ProcedureReturn NextElement(*This\Models())
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Delete element from linked list operator(s) <<<<<

  Procedure DeleteModels(*This.Private_Members)
    
    If *This\Models() <> #Null
      *This\Models()\Free()
    EndIf
    
    DeleteElement(*This\Models())
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Reset linked list operator(s) <<<<<

  Procedure ResetModels(*This.Private_Members)
    
    ResetList(*This\Models())
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Clear linked list operator(s) <<<<<

  Procedure ClearModels(*This.Private_Members)
    
    ForEach *This\Models()
      If *This\Models() <> #Null
        *This\Models()\Free()
      EndIf
    Next
    
    ClearList(*This\Models())
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Index in the linked list operator(s) <<<<<

  Procedure.l ModelsIndex(*This.Private_Members)
    
    ProcedureReturn ListIndex(*This\Models())
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Size of the linked list operator(s) <<<<<

  Procedure.l ModelsSize(*This.Private_Members)
    
    ProcedureReturn ListSize(*This\Models())
  EndProcedure
  
  Procedure RefreshPerspectiveMatrix(*This.Private_Members, AspectRatio.f)
    
    *This\PerspectiveMatrix\Perspective(Radian(#FOV), AspectRatio, #NEAR_PLANE, #FAR_PLANE)
    
    *EntityShader.EntityShader::EntityShader = *This\EntityRenderer\GetEntityShader()
    
    *EntityShader\Bind()
    *EntityShader\SendProjectionMatrix(*This\PerspectiveMatrix)
    *EntityShader\Unbind()
    
    *TerrainShader.TerrainShader::TerrainShader = *This\TerrainRenderer\GetTerrainShader()
    
    *TerrainShader\Bind()
    *TerrainShader\SendProjectionMatrix(*This\PerspectiveMatrix)
    *TerrainShader\Unbind()
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Initialize operator <<<<<  
  
  Procedure Initialize(*This.Private_Members)
    
    TextureLoader.TextureLoader::TextureLoader = TextureLoader::New()
    
    GL20::glFrontFace(#GL_CCW)
    GL20::glEnable(#GL_CULL_FACE)
    GL20::glCullFace(#GL_BACK)
    GL20::glEnable(#GL_DEPTH_TEST)
    GL20::glEnable(OGL::#GL_DEPTH_CLAMP)
    GL20::glClearColor(0.0, 0.0, 0.0, 1.0)
    
    AddElement(*This\Models())
    *This\Models() = Model::New(*This\GameFolderSystem\GetModelsPath() + "Wood Crate.model")

    *Material.Material::Material = *This\Models()\GetMaterial()

    If *Material\FindFloats("Reflectivity")
      *Material\SetFloats(1.0)
    EndIf
    
    TorusBuilder.TorusBuilder::TorusBuilder = TorusBuilder::New(5.0, 1.0, 64, 32)
    
    AddElement(*This\Models())
    *This\Models() = Model::New("Procedural Torus", TorusBuilder\Built())
    
    *Material.Material::Material = *This\Models()\GetMaterial()
    
    *Material\AddTexturesEx("DiffuseMap", Texture::New("mud.png"))
    *Texture.Texture::Texture = *Material\GetTextures()
    *Texture\SetID(TextureLoader\LoadIt(*This\GameFolderSystem\GetDefaultMaterialPath() + *Texture\GetFileName()))
    
    If *Material\FindFloats("ShineDamper")
      *Material\SetFloats(10.0)
    EndIf
    
    If *Material\FindFloats("Reflectivity")
      *Material\SetFloats(1.0)
    EndIf
    
    TorusBuilder\Free()
    
    
    SphereBuilder.SphereBuilder::SphereBuilder = SphereBuilder::New(5.0, 32, 32)
    
    AddElement(*This\Models())
    *This\Models() = Model::New("Procedural Sphere", SphereBuilder\Built())
    
    *Material.Material::Material = *This\Models()\GetMaterial()
    
    *Material\AddTexturesEx("DiffuseMap", Texture::New("mud.png"))
    *Texture.Texture::Texture = *Material\GetTextures()
    *Texture\SetID(TextureLoader\LoadIt(*This\GameFolderSystem\GetDefaultMaterialPath() + *Texture\GetFileName()))
    
    If *Material\FindFloats("ShineDamper")
      *Material\SetFloats(10.0)
    EndIf
    
    If *Material\FindFloats("Reflectivity")
      *Material\SetFloats(1.0)
    EndIf
    
    SphereBuilder\Free()

    CapsuleBuilder.CapsuleBuilder::CapsuleBuilder = CapsuleBuilder::New(2.0, 10.0, 16)
    
    AddElement(*This\Models())
    *This\Models() = Model::New("Procedural Capsule", CapsuleBuilder\Built())
    
    *Material.Material::Material = *This\Models()\GetMaterial()
    
    *Material\AddTexturesEx("DiffuseMap", Texture::New("mud.png"))
    *Texture.Texture::Texture = *Material\GetTextures()
    *Texture\SetID(TextureLoader\LoadIt(*This\GameFolderSystem\GetDefaultMaterialPath() + *Texture\GetFileName()))
    
    If *Material\FindFloats("ShineDamper")
      *Material\SetFloats(10.0)
    EndIf
    
    If *Material\FindFloats("Reflectivity")
      *Material\SetFloats(1.0)
    EndIf
    
    
    CapsuleBuilder\Free()
    
    
    AddElement(*This\Models())
    *This\Models() = Model::New(*This\GameFolderSystem\GetModelsPath() + "Fir Tree.model")
    
    *Material.Material::Material = *This\Models()\GetMaterial()
    
    If *Material\FindFloats("ShineDamper")
      *Material\SetFloats(10.0)
    EndIf
    
    If *Material\FindFloats("Reflectivity")
      *Material\SetFloats(0.0)
    EndIf
    
    
    AddElement(*This\Models())
    *This\Models() = Model::New(*This\GameFolderSystem\GetModelsPath() + "Fern.model")
    
    *Material.Material::Material = *This\Models()\GetMaterial()
    
    If *Material\FindFloats("ShineDamper")
      *Material\SetFloats(10.0)
    EndIf
    
    If *Material\FindFloats("Reflectivity")
      *Material\SetFloats(0.0)
    EndIf
    
    
    *This\Terrain\BuiltTerrainTiles()
    
    *TerrainMaterial.Material::Material = *This\Terrain\GetMaterial()
    
    
    
    *TerrainMaterial\AddTexturesEx("Background", Texture::New("grass.png"))
    *Texture.Texture::Texture = *TerrainMaterial\GetTextures()
    *Texture\SetID(TextureLoader\LoadIt(*This\GameFolderSystem\GetDefaultMaterialPath() + *Texture\GetFileName()))
    
    *TerrainMaterial\AddTexturesEx("RedTexture", Texture::New("mud.png"))
    *Texture.Texture::Texture = *TerrainMaterial\GetTextures()
    *Texture\SetID(TextureLoader\LoadIt(*This\GameFolderSystem\GetDefaultMaterialPath() + *Texture\GetFileName()))
    
    *TerrainMaterial\AddTexturesEx("GreenTexture", Texture::New("grassFlowers.png"))
    *Texture.Texture::Texture = *TerrainMaterial\GetTextures()
    *Texture\SetID(TextureLoader\LoadIt(*This\GameFolderSystem\GetDefaultMaterialPath() + *Texture\GetFileName()))
    
    *TerrainMaterial\AddTexturesEx("BlueTexture", Texture::New("path.png"))
    *Texture.Texture::Texture = *TerrainMaterial\GetTextures()
    *Texture\SetID(TextureLoader\LoadIt(*This\GameFolderSystem\GetDefaultMaterialPath() + *Texture\GetFileName()))
    
    *TerrainMaterial\AddTexturesEx("BlendMap-0-0", Texture::New("blendMap.png"))
    *Texture.Texture::Texture = *TerrainMaterial\GetTextures()
    *Texture\SetID(TextureLoader\LoadIt(*This\GameFolderSystem\GetDefaultMaterialPath() + *Texture\GetFileName()))

    *TerrainMaterial\AddTexturesEx("BlendMap-0-1", Texture::New("blendMap.png"))
    *Texture.Texture::Texture = *TerrainMaterial\GetTextures()
    *Texture\SetID(TextureLoader\LoadIt(*This\GameFolderSystem\GetDefaultMaterialPath() + *Texture\GetFileName()))
    
    *TerrainMaterial\AddTexturesEx("BlendMap-1-0", Texture::New("blendMap.png"))
    *Texture.Texture::Texture = *TerrainMaterial\GetTextures()
    *Texture\SetID(TextureLoader\LoadIt(*This\GameFolderSystem\GetDefaultMaterialPath() + *Texture\GetFileName()))
    
    *TerrainMaterial\AddTexturesEx("BlendMap-1-1", Texture::New("blendMap.png"))
    *Texture.Texture::Texture = *TerrainMaterial\GetTextures()
    *Texture\SetID(TextureLoader\LoadIt(*This\GameFolderSystem\GetDefaultMaterialPath() + *Texture\GetFileName()))
    
    
    
    *TerrainMaterial\AddFloatsEx("TileFactor", 40.0)
    
    *This\Terrain\SendToGPU()
    
    TextureLoader\Free()
    
  EndProcedure
  
  Procedure Render(*This.Private_Members, *Entities.Entities::Entities)
    
    *This\TerrainRenderer\Render(*This\Terrain, *This\Camera, *This\Light)
    
    *This\EntitiesBatches\ProcessEntities(*Entities)
    *This\EntityRenderer\Render(*This\EntitiesBatches, *This\Camera, *This\Light)
    *This\EntitiesBatches\ClearBatches()
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Destructor <<<<<

  Procedure Free(*This.Private_Members)
    
    If *This\PerspectiveMatrix <> #Null
      *This\PerspectiveMatrix\Free()
    EndIf
    
    If *This\Camera <> #Null
      *This\Camera\Free()
    EndIf
    
    If *This\EntityRenderer <> #Null
      *This\EntityRenderer\Free()
    EndIf
    
    ForEach *This\Models()
      If *This\Models() <> #Null
        *This\Models()\Free()
      EndIf
    Next
    
    FreeStructure(*This)
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Constructor <<<<<

  Procedure.i New(AspectRatio.f, *GameFolderSystem.GameFolderSystem::GameFolderSystem)
    
    *This.Private_Members = AllocateStructure(Private_Members)
    *This\VirtualTable = ?START_METHODS
    
    *This\GameFolderSystem = *GameFolderSystem
    
    *This\PerspectiveMatrix = Matrix44f::New()
    
    *This\DefaultMaterial = Material::New() 

    TextureLoader.TextureLoader::TextureLoader = TextureLoader::New()

    *This\DefaultMaterial\AddTexturesEx("DiffuseMap", Texture::New("default_diffuse.bmp"))
    *Texture.Texture::Texture = *This\DefaultMaterial\GetTextures()
    *Texture\SetID(TextureLoader\LoadIt(*This\GameFolderSystem\GetDefaultMaterialPath() + *Texture\GetFileName()))

    *This\DefaultMaterial\AddFloatsEx("ShineDamper", 1.0)
    *This\DefaultMaterial\AddFloatsEx("Reflectivity", 0.0)
    *This\DefaultMaterial\AddIntegersEx("NumberOfRows", 1)
    *This\DefaultMaterial\AddIntegersEx("HasTransparency", 0)
    
    *This\EntitiesBatches = EntitiesBatches::New()
    
    *This\EntityRenderer = EntityRenderer::New(*This\GameFolderSystem, *This\DefaultMaterial)
    *This\TerrainRenderer = TerrainRenderer::New(*This\GameFolderSystem, *This\DefaultMaterial)
    
    *This\HeightsGeneratorParams = HeightsGeneratorParams::New(43215, 132645, 20.0, 2, 0.15)
    *This\Terrain = Terrain::New(2, 2, *This\HeightsGeneratorParams)
    

    
    
    
    *This\Camera = Camera::New(Vector3f::New(0.0, 0.0, 10.0))
    *This\Light = Light::New(Vector3f::New(200.0, 200.0, 100.0), Color3f::New(1.0, 1.0, 1.0))
    
    RefreshPerspectiveMatrix(*This, AspectRatio)
    
    TextureLoader\Free()
    
    ProcedureReturn *This
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Virtual Table Entries <<<<<

  DataSection
    START_METHODS:
    Data.i @GetPerspectiveMatrix()
    Data.i @GetCamera()
    Data.i @GetModels()
    Data.i @GetTerrain()
    Data.i @SetModels()
    Data.i @AddModelsEx()
    Data.i @SelectModels()
    Data.i @FirstModels()
    Data.i @LastModels()
    Data.i @PreviousModels()
    Data.i @NextModels()
    Data.i @DeleteModels()
    Data.i @ResetModels()
    Data.i @ClearModels()
    Data.i @ModelsIndex()
    Data.i @ModelsSize()
    Data.i @RefreshPerspectiveMatrix()
    Data.i @Initialize()
    Data.i @Render()
    Data.i @Free()
    END_METHODS:
  EndDataSection
  
EndModule

; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
; <<<<< Code generated in : 00.001 seconds (151000.00 lines/second) <<<<<
; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

; <<<<<<<<<<<<<<<<<<<<<<<
; <<<<< END OF FILE <<<<<
; <<<<<<<<<<<<<<<<<<<<<<<
; IDE Options = PureBasic 6.00 LTS (Linux - x64)
; Folding = -----
; EnableXP
; CompileSourceDirectory