; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
; AUTOMATICALLY GENERATED CODE, DO NOT MODIFY
; UNLESS YOU REALLY, REALLY, REALLY MEAN IT !!
; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
; Code generated by : Dev-Object - V2.0.0 Beta 7
; Project name : OpenGL 3D Game Tutorial
; File name : Camera.pbi
; File Version : 0.0.0
; Programmation : In progress
; Programmed by : Guillaume Saumure
; AKA : StarBootics
; E-mail : gsaumure@cgocable.ca
; Creation Date : July 28th, 2022
; Last update : July 28th, 2022
; Coded for PureBasic : V6.00 LTS
; Platform : Windows, Linux, MacOS X
; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
; The MIT License (MIT)
; 
; Copyright (c) 2022 Guillaume Saumure
; 
; Permission is hereby granted, free of charge, to any person obtaining a copy of this software and 
; associated documentation files (the "Software"), to deal in the Software without restriction, including 
; without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
; copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the 
; following conditions:
; 
; The above copyright notice and this permission notice shall be included in all copies or substantial 
; portions of the Software.
; 
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT 
; LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO 
; EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER 
; IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
; THE USE OR OTHER DEALINGS IN THE SOFTWARE.
; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

DeclareModule Camera
  
  Interface Camera
    
    GetPosition.i()
    GetTransformedPosition.i()
    GetPitch.f()
    GetYaw.f()
    GetRoll.f()
    GetSpeed.f()
    GetActivateMoveX.f()
    GetActivateMoveY.f()
    GetActivateMoveZ.f()
    SetPosition(*Position.Vector3f::Vector3f)
    SetPitch(Pitch.f)
    SetYaw(Yaw.f)
    SetRoll(Roll.f)
    SetSpeed(Speed.f)
    SetActivateMoveX(ActivateMoveX.f)
    SetActivateMoveY(ActivateMoveY.f)
    SetActivateMoveZ(ActivateMoveZ.f)
    ComputeViewMatrix.i()
    Integrate(FrameTime.d)
    Free()
    
  EndInterface
  
  ; Declare Free(*This)
  Declare.i New(*Position.Vector3f::Vector3f = #Null, Pitch.f = 0.0, Yaw.f = 0.0, Roll.f = 0.0, Speed.f = 35.0)
  
EndDeclareModule

Module Camera
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< Structure declaration <<<<<

  Structure Private_Members
    
    VirtualTable.i
    Position.Vector3f::Vector3f
    TransformedPosition.Vector3f::Vector3f
    Pitch.f
    Yaw.f
    Roll.f
    Speed.f
    ActivateMove.Vector3f::Vector3f
    
  EndStructure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The observators <<<<<

  Procedure.i GetPosition(*This.Private_Members)
    
    ProcedureReturn *This\Position
  EndProcedure

  Procedure.i GetTransformedPosition(*This.Private_Members)
    
    ProcedureReturn *This\TransformedPosition
  EndProcedure
  
  Procedure.f GetPitch(*This.Private_Members)
    
    ProcedureReturn *This\Pitch
  EndProcedure
  
  Procedure.f GetYaw(*This.Private_Members)
    
    ProcedureReturn *This\Yaw
  EndProcedure
  
  Procedure.f GetRoll(*This.Private_Members)
    
    ProcedureReturn *This\Roll
  EndProcedure
  
  Procedure.f GetSpeed(*This.Private_Members)
    
    ProcedureReturn *This\Speed
  EndProcedure
  
  Procedure.f GetActivateMoveX(*This.Private_Members)
    
    ProcedureReturn *This\ActivateMove\GetI()
  EndProcedure
  
  Procedure.f GetActivateMoveY(*This.Private_Members)
    
    ProcedureReturn *This\ActivateMove\GetJ()
  EndProcedure
  
  Procedure.f GetActivateMoveZ(*This.Private_Members)
    
    ProcedureReturn *This\ActivateMove\GetK()
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The mutators <<<<<

  Procedure SetPosition(*This.Private_Members, *Position.Vector3f::Vector3f)
    
    If *This\Position <> #Null
      *This\Position\Free()
    EndIf
    
    *This\Position = *Position
    
  EndProcedure
  
  Procedure SetPitch(*This.Private_Members, Pitch.f)
    
    *This\Pitch = Pitch
    
  EndProcedure
  
  Procedure SetYaw(*This.Private_Members, Yaw.f)
    
    *This\Yaw = Yaw
    
  EndProcedure
  
  Procedure SetRoll(*This.Private_Members, Roll.f)
    
    *This\Roll = Roll
    
  EndProcedure
  
  Procedure SetSpeed(*This.Private_Members, Speed.f)
    
    *This\Speed = Speed
    
  EndProcedure
  
  Procedure SetActivateMoveX(*This.Private_Members, ActivateMoveX.f)
    
    *This\ActivateMove\SetI(ActivateMoveX)
    
  EndProcedure
  
  Procedure SetActivateMoveY(*This.Private_Members, ActivateMoveY.f)
    
    *This\ActivateMove\SetJ(ActivateMoveY)
    
  EndProcedure
  
  Procedure SetActivateMoveZ(*This.Private_Members, ActivateMoveZ.f)
    
    *This\ActivateMove\SetK(ActivateMoveZ)
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The ComputeViewMatrix operator <<<<<
  
  Procedure.i ComputeViewMatrix(*This.Private_Members)
    
    *ViewMatrix.Matrix44f::Matrix44f = Matrix44f::New()
    
    PitchRotation.Matrix44f::Matrix44f = Matrix44f::New()
    PitchRotation\RotateX(Radian(*This\Pitch))
    
    YawRotation.Matrix44f::Matrix44f = Matrix44f::New()
    YawRotation\RotateY(Radian(*This\Yaw))
    
    RollRotation.Matrix44f::Matrix44f = Matrix44f::New()
    RollRotation\RotateZ(Radian(*This\Roll))
    
    Translation.Matrix44f::Matrix44f = Matrix44f::New()
    Translation\Translation(-*This\Position\GetI(), -*This\Position\GetJ(), -*This\Position\GetK())
    
    *ViewMatrix\Multiply(PitchRotation)
    *ViewMatrix\Multiply(YawRotation)
    *ViewMatrix\Multiply(RollRotation)
    *ViewMatrix\Multiply(Translation)
    
    InvViewMatrix.Matrix44f::Matrix44f = *ViewMatrix\Inverse()
    PositionExtractor.Vector4f::Vector4f = Vector4f::New(0.0, 0.0, 0.0, 1.0)
    HomoTransformedPos.Vector4f::Vector4f = InvViewMatrix\ProductMatrixVector(PositionExtractor)
    
    *This\TransformedPosition\SetI(HomoTransformedPos\GetI())
    *This\TransformedPosition\SetJ(HomoTransformedPos\GetJ())
    *This\TransformedPosition\SetK(HomoTransformedPos\GetK())
    
    PositionExtractor\Free()
    HomoTransformedPos\Free()
    PitchRotation\Free()
    YawRotation\Free()
    RollRotation\Free()
    Translation\Free()
    InvViewMatrix\Free()
    
    
    ProcedureReturn *ViewMatrix
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Integrate operators <<<<<
  
  Procedure Integrate(*This.Private_Members, FrameTime.d)
    
    *This\Position\AddScaled(*This\ActivateMove, FrameTime * *This\Speed)
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Destructor <<<<<

  Procedure Free(*This.Private_Members)
    
    If *This\Position <> #Null
      *This\Position\Free()
    EndIf
    
    If *This\ActivateMove <> #Null
      *This\ActivateMove\Free()
    EndIf
    
    FreeStructure(*This)
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Constructor <<<<<

  Procedure.i New(*Position.Vector3f::Vector3f = #Null, Pitch.f = 0.0, Yaw.f = 0.0, Roll.f = 0.0, Speed.f = 35.0)
    
    *This.Private_Members = AllocateStructure(Private_Members)
    *This\VirtualTable = ?START_METHODS
    
    If *Position <> #Null
      *This\Position = *Position
    Else
      *This\Position = Vector3f::New()
    EndIf
    
    *This\Pitch = Pitch
    *This\Yaw = Yaw
    *This\Roll = Roll
    *This\Speed = Speed
    
    *This\ActivateMove = Vector3f::New()
    *This\TransformedPosition = Vector3f::New()
    
    ProcedureReturn *This
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Virtual Table Entries <<<<<

  DataSection
    START_METHODS:
    Data.i @GetPosition()
    Data.i @GetTransformedPosition()
    Data.i @GetPitch()
    Data.i @GetYaw()
    Data.i @GetRoll()
    Data.i @GetSpeed()
    Data.i @GetActivateMoveX()
    Data.i @GetActivateMoveY()
    Data.i @GetActivateMoveZ()
    Data.i @SetPosition()
    Data.i @SetPitch()
    Data.i @SetYaw()
    Data.i @SetRoll()
    Data.i @SetSpeed()
    Data.i @SetActivateMoveX()
    Data.i @SetActivateMoveY()
    Data.i @SetActivateMoveZ()
    Data.i @ComputeViewMatrix()
    Data.i @Integrate()
    Data.i @Free()
    END_METHODS:
  EndDataSection
  
EndModule

; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
; <<<<< Code generated in : 00.001 seconds (182000.00 lines/second) <<<<<
; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

; <<<<<<<<<<<<<<<<<<<<<<<
; <<<<< END OF FILE <<<<<
; <<<<<<<<<<<<<<<<<<<<<<<
; IDE Options = PureBasic 6.00 LTS (Linux - x64)
; Folding = -----
; EnableXP
; CompileSourceDirectory