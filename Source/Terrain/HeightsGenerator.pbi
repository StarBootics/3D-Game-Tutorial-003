; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
; AUTOMATICALLY GENERATED CODE, DO NOT MODIFY
; UNLESS YOU REALLY, REALLY, REALLY MEAN IT !!
; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
; Code generated by : Dev-Object - V2.0.0 Beta 7
; Project name : OpenGL 3D Game Tutorial
; File name : HeightsGenerator.pbi
; File Version : 0.0.0
; Programmation : In progress
; Programmed by : Guillaume Saumure
; AKA : StarBootics
; E-mail : gsaumure@cgocable.ca
; Creation Date : July 28th, 2022
; Last update : July 28th, 2022
; Coded for PureBasic : V6.00 LTS
; Platform : Windows, Linux, MacOS X
; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
; The MIT License (MIT)
; 
; Copyright (c) 2022 Guillaume Saumure
; 
; Permission is hereby granted, free of charge, to any person obtaining a copy of this software and 
; associated documentation files (the "Software"), to deal in the Software without restriction, including 
; without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
; copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the 
; following conditions:
; 
; The above copyright notice and this permission notice shall be included in all copies or substantial 
; portions of the Software.
; 
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT 
; LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO 
; EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER 
; IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
; THE USE OR OTHER DEALINGS IN THE SOFTWARE.
; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

DeclareModule HeightsGenerator
  
  Interface HeightsGenerator
    
    GetParams.i()
    SetParams(*Params.HeightsGeneratorParams::HeightsGeneratorParams)
    CalculateHeight.f(X.l, Z.l)
    CalculateOffset(GridX.l, GridZ.l, VertexCount.l)
    Free()
    
  EndInterface

  Declare.i New(*Params.HeightsGeneratorParams::HeightsGeneratorParams)
  
EndDeclareModule

Module HeightsGenerator
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< Structure declaration <<<<<

  Structure Private_Members
    
    VirtualTable.i
    OffsetX.l
    OffsetZ.l
    *Params.HeightsGeneratorParams::HeightsGeneratorParams
    TMT.TinyMersenneTwister::TinyMersenneTwister
    
  EndStructure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< Support procedures <<<<<  
  
  Procedure.f Interpolate(a.f, b.f, blend.f)
    
    f.f = (1.0 - Cos(blend * #PI)) * 0.5
    
    ProcedureReturn a * (1.0 - f) + b * f
  EndProcedure
  
  Procedure.f GetNoise(*This.Private_Members, X.l, Z.l)
    
    *This\TMT\SetSeed(X * 49632 + Z * 325176 + *This\Params\GetSeedA())
    
    ProcedureReturn *This\TMT\RandomFloat() * 2.0 - 1.0
  EndProcedure
  
  Procedure.f GetSmoothNoise(*This.Private_Members, X.l, Z.l)
    
    Corners.f = (GetNoise(*This, X-1, Z-1) + GetNoise(*This, X+1, Z-1) + GetNoise(*This, X-1, Z+1) + GetNoise(*This, X+1, Z+1)) / 16.0        
    Sides.f = (GetNoise(*This, X-1, Z) + GetNoise(*This, X+1, Z) + GetNoise(*This, X, Z-1) + GetNoise(*This, X, Z+1)) / 8.0
    Center.f = GetNoise(*This, X, Z) / 4.0
    
    ProcedureReturn Corners + Sides + Center
  EndProcedure
  
  Procedure.f GetInterpolatedNoise(*This.Private_Members, x.f, z.f)
    
    IntX.l = Int(x)
    IntZ.l = Int(z)
    
    FractX.f = x - IntX
    FractZ.f = z - IntZ
    
    v1.f = GetSmoothNoise(*This, IntX, IntZ)
    v2.f = GetSmoothNoise(*This, IntX+1, IntZ)
    v3.f = GetSmoothNoise(*This, IntX, IntZ+1) 
    v4.f = GetSmoothNoise(*This, IntX+1, IntZ+1)
    i1.f = Interpolate(v1, v2, FractX)
    i2.f = Interpolate(v3, v4, FractX)
    
    ProcedureReturn Interpolate(i1, i2, FractZ)
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The observators <<<<<

  Procedure.i GetParams(*This.Private_Members)
    
    ProcedureReturn *This\Params
  EndProcedure

  ; <<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The mutators <<<<<

  Procedure SetParams(*This.Private_Members, *Params.HeightsGeneratorParams::HeightsGeneratorParams)
    
    *This\Params = *Params
    *This\TMT\SetSeed(*This\Params\GetSeedB())
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The CalculateHeight operator <<<<<  
  
  Procedure.f CalculateHeight(*This.Private_Members, X.l, Z.l)
    
    d.f = Pow(2.0, *This\Params\GetOctaves()-1)
    
    For Index = 0 To *This\Params\GetOctaves() - 1
      Freq.f = Pow(2, Index) / d
      Amp.f = Pow(*This\Params\GetRoughness(), Index) * *This\Params\GetAmplitude()
      Total.f + (GetInterpolatedNoise(*This, (X + *This\OffsetX) * Freq, (Z + *This\OffsetZ) * Freq) * Amp)
    Next
    
    ProcedureReturn Total
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The CalculateOffset operator <<<<<  
  
  Procedure CalculateOffset(*This.Private_Members, GridX.l, GridZ.l, VertexCount.l)
    
    *This\OffsetX = GridX * (VertexCount - 1)
    *This\OffsetZ = GridZ * (VertexCount - 1)
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Destructor <<<<<

  Procedure Free(*This.Private_Members)
    
    If *This\TMT <> #Null
      *This\TMT\Free()
    EndIf
    
    FreeStructure(*This)
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Constructor <<<<<

  Procedure.i New(*Params.HeightsGeneratorParams::HeightsGeneratorParams)
    
    *This.Private_Members = AllocateStructure(Private_Members)
    *This\VirtualTable = ?START_METHODS
    
    *This\Params = *Params
    *This\TMT = TinyMersenneTwister::New(*This\Params\GetSeedB())
    
    ProcedureReturn *This
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Virtual Table Entries <<<<<

  DataSection
    START_METHODS:
    Data.i @GetParams()
    Data.i @SetParams()
    Data.i @CalculateHeight()
    Data.i @CalculateOffset()
    Data.i @Free()
    END_METHODS:
  EndDataSection
  
EndModule

; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
; <<<<< Code generated in : 00.001 seconds (160000.00 lines/second) <<<<<
; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

; <<<<<<<<<<<<<<<<<<<<<<<
; <<<<< END OF FILE <<<<<
; <<<<<<<<<<<<<<<<<<<<<<<
; IDE Options = PureBasic 6.00 LTS (Linux - x64)
; Folding = ---
; EnableXP
; CompileSourceDirectory