; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
; AUTOMATICALLY GENERATED CODE, DO NOT MODIFY
; UNLESS YOU REALLY, REALLY, REALLY MEAN IT !!
; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
; Code generated by : Dev-Object - V2.0.0 Beta 7
; Project name : OpenGL 3D Game Tutorial
; File name : TerrainVertex.pbi
; File Version : 0.0.1
; Programmation : In progress
; Programmed by : Guillaume Saumure
; AKA : StarBootics
; E-mail : gsaumure@cgocable.ca
; Creation Date : July 28th, 2022
; Last update : July 28th, 2022
; Coded for PureBasic : V6.00 LTS
; Platform : Windows, Linux, MacOS X
; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
; The MIT License (MIT)
; 
; Copyright (c) 2022 Guillaume Saumure
; 
; Permission is hereby granted, free of charge, to any person obtaining a copy of this software and 
; associated documentation files (the "Software"), to deal in the Software without restriction, including 
; without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
; copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the 
; following conditions:
; 
; The above copyright notice and this permission notice shall be included in all copies or substantial 
; portions of the Software.
; 
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT 
; LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO 
; EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER 
; IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
; THE USE OR OTHER DEALINGS IN THE SOFTWARE.
; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

DeclareModule TerrainVertex
  
  #MEMORY_SIZE = 8 * SizeOf(Float)
  
  Interface TerrainVertex
    
    GetPosition.i()
    GetNormal.i()
    GetUVMap.i()
    SetPosition(*Position.Vector3f::Vector3f)
    SetNormal(*Normal.Vector3f::Vector3f)
    SetUVMap(*UVMap.Vector2f::Vector2f)
    Interleave.i(*StartPtr)
    Free()
    
  EndInterface
  
  ; Declare Free(*This)
  Declare.i New(*Position.Vector3f::Vector3f = #Null, *Normal.Vector3f::Vector3f = #Null, *UVMap.Vector2f::Vector2f = #Null)
  
EndDeclareModule

Module TerrainVertex
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< Structure declaration <<<<<

  Structure Private_Members
    
    VirtualTable.i
    Position.Vector3f::Vector3f
    Normal.Vector3f::Vector3f
    UVMap.Vector2f::Vector2f
    
  EndStructure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The observators <<<<<

  Procedure.i GetPosition(*This.Private_Members)
    
    ProcedureReturn *This\Position
  EndProcedure
  
  Procedure.i GetNormal(*This.Private_Members)
    
    ProcedureReturn *This\Normal
  EndProcedure
  
  Procedure.i GetUVMap(*This.Private_Members)
    
    ProcedureReturn *This\UVMap
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The mutators <<<<<

  Procedure SetPosition(*This.Private_Members, *Position.Vector3f::Vector3f)
    
    If *This\Position <> #Null
      *This\Position\Free()
    EndIf
    
    *This\Position = *Position
    
  EndProcedure
  
  Procedure SetNormal(*This.Private_Members, *Normal.Vector3f::Vector3f)
    
    If *This\Normal <> #Null
      *This\Normal\Free()
    EndIf
    
    *This\Normal = *Normal
    
  EndProcedure
  
  Procedure SetUVMap(*This.Private_Members, *UVMap.Vector2f::Vector2f)
    
    If *This\UVMap <> #Null
      *This\UVMap\Free()
    EndIf
    
    *This\UVMap = *UVMap
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Interleave operator <<<<<
  
  Procedure.i Interleave(*This.Private_Members, *StartPtr)
    
    CopyMemory(*This\Position\Access(), *StartPtr + 0, 3 * SizeOf(Float))
    CopyMemory(*This\Normal\Access(), *StartPtr + 3 * SizeOf(Float), 3 * SizeOf(Float))
    CopyMemory(*This\UVMap\Access(), *StartPtr + 6 * SizeOf(Float), 2 * SizeOf(Float))
    
    ProcedureReturn *StartPtr + #MEMORY_SIZE
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Destructor <<<<<

  Procedure Free(*This.Private_Members)
    
    If *This\Position <> #Null
      *This\Position\Free()
    EndIf
    
    If *This\Normal <> #Null
      *This\Normal\Free()
    EndIf
    
    If *This\UVMap <> #Null
      *This\UVMap\Free()
    EndIf
    
    FreeStructure(*This)
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Constructor <<<<<

  Procedure.i New(*Position.Vector3f::Vector3f = #Null, *Normal.Vector3f::Vector3f = #Null, *UVMap.Vector2f::Vector2f = #Null)
    
    *This.Private_Members = AllocateStructure(Private_Members)
    *This\VirtualTable = ?START_METHODS
    
    If *Position <> #Null
      *This\Position = *Position
    Else
      *This\Position = Vector3f::New()
    EndIf
    
    If *Normal <> #Null
      *This\Normal = *Normal
    Else
      *This\Normal = Vector3f::New()
    EndIf
    
    If *UVMap <> #Null
      *This\UVMap = *UVMap
    Else
      *This\UVMap = Vector2f::New()
    EndIf
    
    ProcedureReturn *This
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Virtual Table Entries <<<<<

  DataSection
    START_METHODS:
    Data.i @GetPosition()
    Data.i @GetNormal()
    Data.i @GetUVMap()
    Data.i @SetPosition()
    Data.i @SetNormal()
    Data.i @SetUVMap()
    Data.i @Interleave()
    Data.i @Free()
    END_METHODS:
  EndDataSection
  
EndModule

; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
; <<<<< Code generated in : 00.001 seconds (190000.00 lines/second) <<<<<
; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

; <<<<<<<<<<<<<<<<<<<<<<<
; <<<<< END OF FILE <<<<<
; <<<<<<<<<<<<<<<<<<<<<<<
; IDE Options = PureBasic 6.00 LTS (Linux - x64)
; Folding = ---
; EnableXP
; CompileSourceDirectory