; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
; AUTOMATICALLY GENERATED CODE, DO NOT MODIFY
; UNLESS YOU REALLY, REALLY, REALLY MEAN IT !!
; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
; Code generated by : Dev-Object - V2.0.0 Beta 7
; Project name : OpenGL 3D Game Tutorial
; File name : Vector4f.pbi
; File Version : 1.0.0
; Programmation : OK
; Programmed by : Guillaume Saumure
; AKA : StarBootics
; E-mail : gsaumure@cgocable.ca
; Creation Date : November 10th, 2021
; Last update : July 21st, 2022
; Coded for PureBasic : V6.00 LTS
; Platform : Windows, Linux, MacOS X
; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
; The MIT License (MIT)
; 
; Copyright (c) 2021 Guillaume Saumure
; 
; Permission is hereby granted, free of charge, to any person obtaining a copy of this software and 
; associated documentation files (the "Software"), to deal in the Software without restriction, including 
; without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
; copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the 
; following conditions:
; 
; The above copyright notice and this permission notice shall be included in all copies or substantial 
; portions of the Software.
; 
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT 
; LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO 
; EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER 
; IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR 
; THE USE OR OTHER DEALINGS IN THE SOFTWARE.
; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

DeclareModule Matrix44f
  
  Interface Matrix44f
    
    GetE11.f()
    GetE21.f()
    GetE31.f()
    GetE41.f()
    GetE12.f()
    GetE22.f()
    GetE32.f()
    GetE42.f()
    GetE13.f()
    GetE23.f()
    GetE33.f()
    GetE43.f()
    GetE14.f()
    GetE24.f()
    GetE34.f()
    GetE44.f()
    SetE11(e11.f)
    SetE21(e21.f)
    SetE31(e31.f)
    SetE41(e41.f)
    SetE12(e12.f)
    SetE22(e22.f)
    SetE32(e32.f)
    SetE42(e42.f)
    SetE13(e13.f)
    SetE23(e23.f)
    SetE33(e33.f)
    SetE43(e43.f)
    SetE14(e14.f)
    SetE24(e24.f)
    SetE34(e34.f)
    SetE44(e44.f)
    SetLine1(e11.f, e12.f, e13.f, e14.f)
    SetLine2(e21.f, e22.f, e23.f, e24.f)
    SetLine3(e31.f, e32.f, e33.f, e34.f)
    SetLine4(e41.f, e42.f, e43.f, e44.f)
    Clear()
    Access.i()
    Equal(*Other)
    Plus.i(*Other)
    Minus.i(*Other)
    Add(*Other)
    AddScaled(*Other, Scale.f)
    Subtract(*Other)
    AddScalar(Scalar.f)
    SubtractScalar(Scalar.f)
    ProductByScalar(Scalar.f)
    DivideByScalar(Scalar.f)
    Lerp.i(*Other, Proportion.f)
    Multiply(*Other)
    Copy.i()
    Compare.i(*Other)
    Swapping(*Other)
    ReadMatrix44f(FileID.i)
    WriteMatrix44f(FileID.i)
    Identity()
    Transpose()
    Determinant.f()
    Inverse.i(*Success.Integer = #Null)
    Translation(Trans_x.f, Trans_y.f, Trans_z.f)
    TranslationEx(*VectorA.Vector3f::Vector3f)
    Scale(Scale_x.f, Scale_y.f, Scale_z.f)
    ScaleEx(*VectorA.Vector3f::Vector3f)
    RotateX(Theta.f)
    RotateY(Theta.f)
    RotateZ(Theta.f)
    Rotation(*Forward.Vector3f::Vector3f, *Up.Vector3f::Vector3f, *Right.Vector3f::Vector3f)
    RotationEx(*Forward.Vector3f::Vector3f, *Up.Vector3f::Vector3f)
    
    CompilerIf Defined(Vector4f, #PB_Module)
      ProductMatrixVector.i(*VectorA.Vector4f::Vector4f)
      ProductVectorMatrix.i(*VectorA.Vector4f::Vector4f)
      ApplyTransformation(*NewVector.Vector3f::Vector3f, *Vector.Vector3f::Vector3f, Mode.i = 0)
    CompilerEndIf
    
    Perspective(FOVY.f, Aspect.f, Near.f, Far.f)
    Orthogonal(Left.f, Right.f, Bottom.f, Top.f, Near.f, Far.f)
    Free()
    
  EndInterface
  
  Declare.i New(e11.f = 1.0, e21.f = 0.0, e31.f = 0.0, e41.f = 0.0, e12.f = 0.0, e22.f = 1.0, e32.f = 0.0, e42.f = 0.0, e13.f = 0.0, e23.f = 0.0, e33.f = 1.0, e43.f = 0.0, e14.f = 0.0, e24.f = 0.0, e34.f = 0.0, e44.f = 1.0)
  
EndDeclareModule

Module Matrix44f
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< Structure declaration <<<<<

  Structure Private_Members
    
    VirtualTable.i
    e11.f
    e21.f
    e31.f
    e41.f
    e12.f
    e22.f
    e32.f
    e42.f
    e13.f
    e23.f
    e33.f
    e43.f
    e14.f
    e24.f
    e34.f
    e44.f
    
  EndStructure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< Helper Macro <<<<<
  
  Macro Cofactor(m0, m1, m2, m3, m4, m5, m6, m7, m8)
    
    (m0 * (m4 * m8 - m5 * m7) - m1 * (m3 * m8 - m5 * m6) + m2 * (m3 * m7 - m4 * m6))
    
  EndMacro 
 
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The observators <<<<<

  Procedure.f GetE11(*This.Private_Members)
    
    ProcedureReturn *This\e11
  EndProcedure
  
  Procedure.f GetE21(*This.Private_Members)
    
    ProcedureReturn *This\e21
  EndProcedure
  
  Procedure.f GetE31(*This.Private_Members)
    
    ProcedureReturn *This\e31
  EndProcedure
  
  Procedure.f GetE41(*This.Private_Members)
    
    ProcedureReturn *This\e41
  EndProcedure
  
  Procedure.f GetE12(*This.Private_Members)
    
    ProcedureReturn *This\e12
  EndProcedure
  
  Procedure.f GetE22(*This.Private_Members)
    
    ProcedureReturn *This\e22
  EndProcedure
  
  Procedure.f GetE32(*This.Private_Members)
    
    ProcedureReturn *This\e32
  EndProcedure
  
  Procedure.f GetE42(*This.Private_Members)
    
    ProcedureReturn *This\e42
  EndProcedure
  
  Procedure.f GetE13(*This.Private_Members)
    
    ProcedureReturn *This\e13
  EndProcedure
  
  Procedure.f GetE23(*This.Private_Members)
    
    ProcedureReturn *This\e23
  EndProcedure
  
  Procedure.f GetE33(*This.Private_Members)
    
    ProcedureReturn *This\e33
  EndProcedure
  
  Procedure.f GetE43(*This.Private_Members)
    
    ProcedureReturn *This\e43
  EndProcedure
  
  Procedure.f GetE14(*This.Private_Members)
    
    ProcedureReturn *This\e14
  EndProcedure
  
  Procedure.f GetE24(*This.Private_Members)
    
    ProcedureReturn *This\e24
  EndProcedure
  
  Procedure.f GetE34(*This.Private_Members)
    
    ProcedureReturn *This\e34
  EndProcedure
  
  Procedure.f GetE44(*This.Private_Members)
    
    ProcedureReturn *This\e44
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The mutators <<<<<

  Procedure SetE11(*This.Private_Members, e11.f)
    
    *This\e11 = e11
    
  EndProcedure
  
  Procedure SetE21(*This.Private_Members, e21.f)
    
    *This\e21 = e21
    
  EndProcedure
  
  Procedure SetE31(*This.Private_Members, e31.f)
    
    *This\e31 = e31
    
  EndProcedure
  
  Procedure SetE41(*This.Private_Members, e41.f)
    
    *This\e41 = e41
    
  EndProcedure
  
  Procedure SetE12(*This.Private_Members, e12.f)
    
    *This\e12 = e12
    
  EndProcedure
  
  Procedure SetE22(*This.Private_Members, e22.f)
    
    *This\e22 = e22
    
  EndProcedure
  
  Procedure SetE32(*This.Private_Members, e32.f)
    
    *This\e32 = e32
    
  EndProcedure
  
  Procedure SetE42(*This.Private_Members, e42.f)
    
    *This\e42 = e42
    
  EndProcedure
  
  Procedure SetE13(*This.Private_Members, e13.f)
    
    *This\e13 = e13
    
  EndProcedure
  
  Procedure SetE23(*This.Private_Members, e23.f)
    
    *This\e23 = e23
    
  EndProcedure
  
  Procedure SetE33(*This.Private_Members, e33.f)
    
    *This\e33 = e33
    
  EndProcedure
  
  Procedure SetE43(*This.Private_Members, e43.f)
    
    *This\e43 = e43
    
  EndProcedure
  
  Procedure SetE14(*This.Private_Members, e14.f)
    
    *This\e14 = e14
    
  EndProcedure
  
  Procedure SetE24(*This.Private_Members, e24.f)
    
    *This\e24 = e24
    
  EndProcedure
  
  Procedure SetE34(*This.Private_Members, e34.f)
    
    *This\e34 = e34
    
  EndProcedure
  
  Procedure SetE44(*This.Private_Members, e44.f)
    
    *This\e44 = e44
    
  EndProcedure
  
  Procedure SetLine1(*This.Private_Members, e11.f, e12.f, e13.f, e14.f)
    
    *This\e11 = e11
    *This\e12 = e12
    *This\e13 = e13
    *This\e14 = e14
    
  EndProcedure
  
  Procedure SetLine2(*This.Private_Members, e21.f, e22.f, e23.f, e24.f)
    
    *This\e21 = e21
    *This\e22 = e22
    *This\e23 = e23
    *This\e24 = e24
    
  EndProcedure
  
  Procedure SetLine3(*This.Private_Members, e31.f, e32.f, e33.f, e34.f)
    
    *This\e31 = e31
    *This\e32 = e32
    *This\e33 = e33
    *This\e34 = e34
    
  EndProcedure
  
  Procedure SetLine4(*This.Private_Members, e41.f, e42.f, e43.f, e44.f)
    
    *This\e41 = e41
    *This\e42 = e42
    *This\e43 = e43
    *This\e44 = e44
    
  EndProcedure
 
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Clear operator <<<<<

  Procedure Clear(*This.Private_Members)
    
    *This\e11 = 0.0
    *This\e21 = 0.0
    *This\e31 = 0.0
    *This\e41 = 0.0
    *This\e12 = 0.0
    *This\e22 = 0.0
    *This\e32 = 0.0
    *This\e42 = 0.0
    *This\e13 = 0.0
    *This\e23 = 0.0
    *This\e33 = 0.0
    *This\e43 = 0.0
    *This\e14 = 0.0
    *This\e24 = 0.0
    *This\e34 = 0.0
    *This\e44 = 0.0
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Access operator <<<<<

  Procedure.i Access(*This.Private_Members)
    
    ProcedureReturn *This + OffsetOf(Private_Members\e11)
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Equal operator : A = B <<<<<
  
  Procedure Equal(*This.Private_Members, *Other.Private_Members)
    
    *This\e11 = *Other\e11
    *This\e21 = *Other\e21
    *This\e31 = *Other\e31
    *This\e41 = *Other\e41
    *This\e12 = *Other\e12
    *This\e22 = *Other\e22
    *This\e32 = *Other\e32
    *This\e42 = *Other\e42
    *This\e13 = *Other\e13
    *This\e23 = *Other\e23
    *This\e33 = *Other\e33
    *This\e43 = *Other\e43
    *This\e14 = *Other\e14
    *This\e24 = *Other\e24
    *This\e34 = *Other\e34
    *This\e44 = *Other\e44
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Plus operator : R = A + B <<<<<

  Procedure.i Plus(*This.Private_Members, *Other.Private_Members)
    
    *Result.Private_Members = AllocateStructure(Private_Members)
    *Result\VirtualTable = ?START_METHODS
    
    *Result\e11 = *This\e11 + *Other\e11
    *Result\e21 = *This\e21 + *Other\e21
    *Result\e31 = *This\e31 + *Other\e31
    *Result\e41 = *This\e41 + *Other\e41
    *Result\e12 = *This\e12 + *Other\e12
    *Result\e22 = *This\e22 + *Other\e22
    *Result\e32 = *This\e32 + *Other\e32
    *Result\e42 = *This\e42 + *Other\e42
    *Result\e13 = *This\e13 + *Other\e13
    *Result\e23 = *This\e23 + *Other\e23
    *Result\e33 = *This\e33 + *Other\e33
    *Result\e43 = *This\e43 + *Other\e43
    *Result\e14 = *This\e14 + *Other\e14
    *Result\e24 = *This\e24 + *Other\e24
    *Result\e34 = *This\e34 + *Other\e34
    *Result\e44 = *This\e44 + *Other\e44
    
    ProcedureReturn *Result
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Minus operator : R = A - B <<<<<

  Procedure.i Minus(*This.Private_Members, *Other.Private_Members)
    
    *Result.Private_Members = AllocateStructure(Private_Members)
    *Result\VirtualTable = ?START_METHODS
    
    *Result\e11 = *This\e11 - *Other\e11
    *Result\e21 = *This\e21 - *Other\e21
    *Result\e31 = *This\e31 - *Other\e31
    *Result\e41 = *This\e41 - *Other\e41
    *Result\e12 = *This\e12 - *Other\e12
    *Result\e22 = *This\e22 - *Other\e22
    *Result\e32 = *This\e32 - *Other\e32
    *Result\e42 = *This\e42 - *Other\e42
    *Result\e13 = *This\e13 - *Other\e13
    *Result\e23 = *This\e23 - *Other\e23
    *Result\e33 = *This\e33 - *Other\e33
    *Result\e43 = *This\e43 - *Other\e43
    *Result\e14 = *This\e14 - *Other\e14
    *Result\e24 = *This\e24 - *Other\e24
    *Result\e34 = *This\e34 - *Other\e34
    *Result\e44 = *This\e44 - *Other\e44
    
    ProcedureReturn *Result
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Add operator : A = A + B <<<<<

  Procedure Add(*This.Private_Members, *Other.Private_Members)
    
    *This\e11 + *Other\e11
    *This\e21 + *Other\e21
    *This\e31 + *Other\e31
    *This\e41 + *Other\e41
    *This\e12 + *Other\e12
    *This\e22 + *Other\e22
    *This\e32 + *Other\e32
    *This\e42 + *Other\e42
    *This\e13 + *Other\e13
    *This\e23 + *Other\e23
    *This\e33 + *Other\e33
    *This\e43 + *Other\e43
    *This\e14 + *Other\e14
    *This\e24 + *Other\e24
    *This\e34 + *Other\e34
    *This\e44 + *Other\e44
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The AddScaled operator : A = A + B * S <<<<<

  Procedure AddScaled(*This.Private_Members, *Other.Private_Members, Scale.f)
    
    *This\e11 + *Other\e11 * Scale
    *This\e21 + *Other\e21 * Scale
    *This\e31 + *Other\e31 * Scale
    *This\e41 + *Other\e41 * Scale
    *This\e12 + *Other\e12 * Scale
    *This\e22 + *Other\e22 * Scale
    *This\e32 + *Other\e32 * Scale
    *This\e42 + *Other\e42 * Scale
    *This\e13 + *Other\e13 * Scale
    *This\e23 + *Other\e23 * Scale
    *This\e33 + *Other\e33 * Scale
    *This\e43 + *Other\e43 * Scale
    *This\e14 + *Other\e14 * Scale
    *This\e24 + *Other\e24 * Scale
    *This\e34 + *Other\e34 * Scale
    *This\e44 + *Other\e44 * Scale
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Subtract operator : A = A - B <<<<<

  Procedure Subtract(*This.Private_Members, *Other.Private_Members)
    
    *This\e11 - *Other\e11
    *This\e21 - *Other\e21
    *This\e31 - *Other\e31
    *This\e41 - *Other\e41
    *This\e12 - *Other\e12
    *This\e22 - *Other\e22
    *This\e32 - *Other\e32
    *This\e42 - *Other\e42
    *This\e13 - *Other\e13
    *This\e23 - *Other\e23
    *This\e33 - *Other\e33
    *This\e43 - *Other\e43
    *This\e14 - *Other\e14
    *This\e24 - *Other\e24
    *This\e34 - *Other\e34
    *This\e44 - *Other\e44
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The AddScalar operator : A = A + Scalar <<<<<

  Procedure AddScalar(*This.Private_Members, Scalar.f)
    
    *This\e11 + Scalar
    *This\e21 + Scalar
    *This\e31 + Scalar
    *This\e41 + Scalar
    *This\e12 + Scalar
    *This\e22 + Scalar
    *This\e32 + Scalar
    *This\e42 + Scalar
    *This\e13 + Scalar
    *This\e23 + Scalar
    *This\e33 + Scalar
    *This\e43 + Scalar
    *This\e14 + Scalar
    *This\e24 + Scalar
    *This\e34 + Scalar
    *This\e44 + Scalar
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The SubtractScalar operator : A = A - Scalar <<<<<

  Procedure SubtractScalar(*This.Private_Members, Scalar.f)
    
    *This\e11 - Scalar
    *This\e21 - Scalar
    *This\e31 - Scalar
    *This\e41 - Scalar
    *This\e12 - Scalar
    *This\e22 - Scalar
    *This\e32 - Scalar
    *This\e42 - Scalar
    *This\e13 - Scalar
    *This\e23 - Scalar
    *This\e33 - Scalar
    *This\e43 - Scalar
    *This\e14 - Scalar
    *This\e24 - Scalar
    *This\e34 - Scalar
    *This\e44 - Scalar
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The ProductByScalar operator : A = A * Scalar <<<<<

  Procedure ProductByScalar(*This.Private_Members, Scalar.f)
    
    *This\e11 * Scalar
    *This\e21 * Scalar
    *This\e31 * Scalar
    *This\e41 * Scalar
    *This\e12 * Scalar
    *This\e22 * Scalar
    *This\e32 * Scalar
    *This\e42 * Scalar
    *This\e13 * Scalar
    *This\e23 * Scalar
    *This\e33 * Scalar
    *This\e43 * Scalar
    *This\e14 * Scalar
    *This\e24 * Scalar
    *This\e34 * Scalar
    *This\e44 * Scalar
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The DivideByScalar operator : A = A / Scalar <<<<<

  Procedure DivideByScalar(*This.Private_Members, Scalar.f)
    
    *This\e11 / Scalar
    *This\e21 / Scalar
    *This\e31 / Scalar
    *This\e41 / Scalar
    *This\e12 / Scalar
    *This\e22 / Scalar
    *This\e32 / Scalar
    *This\e42 / Scalar
    *This\e13 / Scalar
    *This\e23 / Scalar
    *This\e33 / Scalar
    *This\e43 / Scalar
    *This\e14 / Scalar
    *This\e24 / Scalar
    *This\e34 / Scalar
    *This\e44 / Scalar
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Linear Interpolation operator <<<<<

  Procedure.i Lerp(*This.Private_Members, *Other.Private_Members, Proportion.f)
    
    *Result.Private_Members = AllocateStructure(Private_Members)
    *Result\VirtualTable = ?START_METHODS
    
    *Result\e11 = *This\e11 + Proportion * (*Other\e11 - *This\e11)
    *Result\e21 = *This\e21 + Proportion * (*Other\e21 - *This\e21)
    *Result\e31 = *This\e31 + Proportion * (*Other\e31 - *This\e31)
    *Result\e41 = *This\e41 + Proportion * (*Other\e41 - *This\e41)
    *Result\e12 = *This\e12 + Proportion * (*Other\e12 - *This\e12)
    *Result\e22 = *This\e22 + Proportion * (*Other\e22 - *This\e22)
    *Result\e32 = *This\e32 + Proportion * (*Other\e32 - *This\e32)
    *Result\e42 = *This\e42 + Proportion * (*Other\e42 - *This\e42)
    *Result\e13 = *This\e13 + Proportion * (*Other\e13 - *This\e13)
    *Result\e23 = *This\e23 + Proportion * (*Other\e23 - *This\e23)
    *Result\e33 = *This\e33 + Proportion * (*Other\e33 - *This\e33)
    *Result\e43 = *This\e43 + Proportion * (*Other\e43 - *This\e43)
    *Result\e14 = *This\e14 + Proportion * (*Other\e14 - *This\e14)
    *Result\e24 = *This\e24 + Proportion * (*Other\e24 - *This\e24)
    *Result\e34 = *This\e34 + Proportion * (*Other\e34 - *This\e34)
    *Result\e44 = *This\e44 + Proportion * (*Other\e44 - *This\e44)
    
    ProcedureReturn *Result
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Multiply operator <<<<<
  
  Procedure Multiply(*This.Private_Members, *Other.Private_Members)
    
    e11.f = *This\e11 * *Other\e11 + *This\e12 * *Other\e21 + *This\e13 * *Other\e31 + *This\e14 * *Other\e41
    e12.f = *This\e11 * *Other\e12 + *This\e12 * *Other\e22 + *This\e13 * *Other\e32 + *This\e14 * *Other\e42
    e13.f = *This\e11 * *Other\e13 + *This\e12 * *Other\e23 + *This\e13 * *Other\e33 + *This\e14 * *Other\e43
    e14.f = *This\e11 * *Other\e14 + *This\e12 * *Other\e24 + *This\e13 * *Other\e34 + *This\e14 * *Other\e44
    e21.f = *This\e21 * *Other\e11 + *This\e22 * *Other\e21 + *This\e23 * *Other\e31 + *This\e24 * *Other\e41
    e22.f = *This\e21 * *Other\e12 + *This\e22 * *Other\e22 + *This\e23 * *Other\e32 + *This\e24 * *Other\e42
    e23.f = *This\e21 * *Other\e13 + *This\e22 * *Other\e23 + *This\e23 * *Other\e33 + *This\e24 * *Other\e43
    e24.f = *This\e21 * *Other\e14 + *This\e22 * *Other\e24 + *This\e23 * *Other\e34 + *This\e24 * *Other\e44
    e31.f = *This\e31 * *Other\e11 + *This\e32 * *Other\e21 + *This\e33 * *Other\e31 + *This\e34 * *Other\e41
    e32.f = *This\e31 * *Other\e12 + *This\e32 * *Other\e22 + *This\e33 * *Other\e32 + *This\e34 * *Other\e42
    e33.f = *This\e31 * *Other\e13 + *This\e32 * *Other\e23 + *This\e33 * *Other\e33 + *This\e34 * *Other\e43
    e34.f = *This\e31 * *Other\e14 + *This\e32 * *Other\e24 + *This\e33 * *Other\e34 + *This\e34 * *Other\e44
    e41.f = *This\e41 * *Other\e11 + *This\e42 * *Other\e21 + *This\e43 * *Other\e31 + *This\e44 * *Other\e41
    e42.f = *This\e41 * *Other\e12 + *This\e42 * *Other\e22 + *This\e43 * *Other\e32 + *This\e44 * *Other\e42
    e43.f = *This\e41 * *Other\e13 + *This\e42 * *Other\e23 + *This\e43 * *Other\e33 + *This\e44 * *Other\e43
    e44.f = *This\e41 * *Other\e14 + *This\e42 * *Other\e24 + *This\e43 * *Other\e34 + *This\e44 * *Other\e44
    
    *This\e11 = e11
    *This\e12 = e12
    *This\e13 = e13
    *This\e14 = e14
    
    *This\e21 = e21
    *This\e22 = e22
    *This\e23 = e23
    *This\e24 = e24
    
    *This\e31 = e31
    *This\e32 = e32
    *This\e33 = e33
    *This\e34 = e34
    
    *This\e41 = e41
    *This\e42 = e42
    *This\e43 = e43
    *This\e44 = e44
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Copy operator <<<<<

  Procedure.i Copy(*This.Private_Members)
    
    *Copy.Private_Members = AllocateStructure(Private_Members)
    
    CopyStructure(*This, *Copy, Private_Members)
    
    ProcedureReturn *Copy
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Compare operator <<<<<

  Procedure.i Compare(*This.Private_Members, *Other.Private_Members)
    
    ProcedureReturn CompareMemory(*This, *Other, SizeOf(Private_Members))
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Swapping operator <<<<<

  Procedure Swapping(*This.Private_Members, *Other.Private_Members)
    
    Swap *This\e11, *Other\e11
    Swap *This\e21, *Other\e21
    Swap *This\e31, *Other\e31
    Swap *This\e41, *Other\e41
    Swap *This\e12, *Other\e12
    Swap *This\e22, *Other\e22
    Swap *This\e32, *Other\e32
    Swap *This\e42, *Other\e42
    Swap *This\e13, *Other\e13
    Swap *This\e23, *Other\e23
    Swap *This\e33, *Other\e33
    Swap *This\e43, *Other\e43
    Swap *This\e14, *Other\e14
    Swap *This\e24, *Other\e24
    Swap *This\e34, *Other\e34
    Swap *This\e44, *Other\e44
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< Read in Binary file <<<<<

  Procedure ReadMatrix44f(*This.Private_Members, FileID.i)
    
    *This\e11 = ReadFloat(FileID)
    *This\e21 = ReadFloat(FileID)
    *This\e31 = ReadFloat(FileID)
    *This\e41 = ReadFloat(FileID)
    *This\e12 = ReadFloat(FileID)
    *This\e22 = ReadFloat(FileID)
    *This\e32 = ReadFloat(FileID)
    *This\e42 = ReadFloat(FileID)
    *This\e13 = ReadFloat(FileID)
    *This\e23 = ReadFloat(FileID)
    *This\e33 = ReadFloat(FileID)
    *This\e43 = ReadFloat(FileID)
    *This\e14 = ReadFloat(FileID)
    *This\e24 = ReadFloat(FileID)
    *This\e34 = ReadFloat(FileID)
    *This\e44 = ReadFloat(FileID)
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< Write in Binary file <<<<<

  Procedure WriteMatrix44f(*This.Private_Members, FileID.i)
    
    WriteFloat(FileID, *This\e11)
    WriteFloat(FileID, *This\e21)
    WriteFloat(FileID, *This\e31)
    WriteFloat(FileID, *This\e41)
    WriteFloat(FileID, *This\e12)
    WriteFloat(FileID, *This\e22)
    WriteFloat(FileID, *This\e32)
    WriteFloat(FileID, *This\e42)
    WriteFloat(FileID, *This\e13)
    WriteFloat(FileID, *This\e23)
    WriteFloat(FileID, *This\e33)
    WriteFloat(FileID, *This\e43)
    WriteFloat(FileID, *This\e14)
    WriteFloat(FileID, *This\e24)
    WriteFloat(FileID, *This\e34)
    WriteFloat(FileID, *This\e44)
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Identity operator <<<<<
  
  Procedure Identity(*This.Private_Members)
    
    *This\e11 = 1.0
    *This\e12 = 0.0
    *This\e13 = 0.0
    *This\e14 = 0.0
    
    *This\e21 = 0.0
    *This\e22 = 1.0
    *This\e23 = 0.0
    *This\e24 = 0.0
    
    *This\e31 = 0.0
    *This\e32 = 0.0
    *This\e33 = 1.0
    *This\e34 = 0.0
    
    *This\e41 = 0.0
    *This\e42 = 0.0
    *This\e43 = 0.0
    *This\e44 = 1.0
    
  EndProcedure 
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Transpose operator <<<<<
  
  Procedure Transpose(*This.Private_Members)
    
    Swap *This\e12, *This\e21
    Swap *This\e13, *This\e31
    Swap *This\e14, *This\e41
    Swap *This\e23, *This\e32
    Swap *This\e24, *This\e42
    Swap *This\e34, *This\e43
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Determinant operator <<<<<
  
  Procedure.f Determinant(*This.Private_Members)
    
    Temp00.f = *This\e11 * Cofactor(*This\e22, *This\e32, *This\e42, *This\e23, *This\e33, *This\e43, *This\e24, *This\e34, *This\e44)
    Temp01.f = *This\e21 * Cofactor(*This\e12, *This\e32, *This\e42, *This\e13, *This\e33, *This\e43, *This\e14, *This\e34, *This\e44)
    Temp02.f = *This\e31 * Cofactor(*This\e12, *This\e22, *This\e42, *This\e13, *This\e23, *This\e43, *This\e14, *This\e24, *This\e44)
    Temp03.f = *This\e41 * Cofactor(*This\e12, *This\e22, *This\e32, *This\e13, *This\e23, *This\e33, *This\e14, *This\e24, *This\e34)
    
    ProcedureReturn Temp00 - Temp01 + Temp02 - Temp03
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Inverse operator <<<<<
  
  Procedure.i Inverse(*This.Private_Members, *Success.Integer = #Null)
    
    *Inverse.Private_Members = AllocateStructure(Private_Members)
    *Inverse\VirtualTable = ?START_METHODS
    
    Cofactor00.f = Cofactor(*This\e22, *This\e32, *This\e42, *This\e23, *This\e33, *This\e43, *This\e24, *This\e34, *This\e44)
    Cofactor01.f = Cofactor(*This\e12, *This\e32, *This\e42, *This\e13, *This\e33, *This\e43, *This\e14, *This\e34, *This\e44)
    Cofactor02.f = Cofactor(*This\e12, *This\e22, *This\e42, *This\e13, *This\e23, *This\e43, *This\e14, *This\e24, *This\e44)
    Cofactor03.f = Cofactor(*This\e12, *This\e22, *This\e32, *This\e13, *This\e23, *This\e33, *This\e14, *This\e24, *This\e34)
    
    Determinant.f = *This\e11 * Cofactor00 - *This\e21 * Cofactor01 + *This\e31 * Cofactor02 - *This\e41 * Cofactor03
    
    If Abs(Determinant) <= 0.00001
      
      Identity(*Inverse)
      
      If *Success <> #Null
        *Success\i = #False
      EndIf
      
      ProcedureReturn *Inverse
      
    EndIf
    
    Cofactor04.f = Cofactor(*This\e21, *This\e31, *This\e41, *This\e23, *This\e33, *This\e43, *This\e24, *This\e34, *This\e44)
    Cofactor05.f = Cofactor(*This\e11, *This\e31, *This\e41, *This\e13, *This\e33, *This\e43, *This\e14, *This\e34, *This\e44)
    Cofactor06.f = Cofactor(*This\e11, *This\e21, *This\e41, *This\e13, *This\e23, *This\e43, *This\e14, *This\e24, *This\e44)
    Cofactor07.f = Cofactor(*This\e11, *This\e21, *This\e31, *This\e13, *This\e23, *This\e33, *This\e14, *This\e24, *This\e34)
    
    Cofactor08.f = Cofactor(*This\e21, *This\e31, *This\e41, *This\e22, *This\e32, *This\e42, *This\e24, *This\e34, *This\e44)
    Cofactor09.f = Cofactor(*This\e11, *This\e31, *This\e41, *This\e12, *This\e32, *This\e42, *This\e14, *This\e34, *This\e44)
    Cofactor10.f = Cofactor(*This\e11, *This\e21, *This\e41, *This\e12, *This\e22, *This\e42, *This\e14, *This\e24, *This\e44)
    Cofactor11.f = Cofactor(*This\e11, *This\e21, *This\e31, *This\e12, *This\e22, *This\e32, *This\e14, *This\e24, *This\e34)
    
    Cofactor12.f = Cofactor(*This\e21, *This\e31, *This\e41, *This\e22, *This\e32, *This\e42, *This\e23, *This\e33, *This\e43)
    Cofactor13.f = Cofactor(*This\e11, *This\e31, *This\e41, *This\e12, *This\e32, *This\e42, *This\e13, *This\e33, *This\e43)
    Cofactor14.f = Cofactor(*This\e11, *This\e21, *This\e41, *This\e12, *This\e22, *This\e42, *This\e13, *This\e23, *This\e43)
    Cofactor15.f = Cofactor(*This\e11, *This\e21, *This\e31, *This\e12, *This\e22, *This\e32, *This\e13, *This\e23, *This\e33)
    
    InvDeterminant.f = 1.0 / Determinant
    
    *Inverse\e11 = InvDeterminant * Cofactor00
    *Inverse\e21 = -InvDeterminant * Cofactor04
    *Inverse\e31 = InvDeterminant * Cofactor08
    *Inverse\e41 = -InvDeterminant * Cofactor12
    
    *Inverse\e12 = -InvDeterminant * Cofactor01
    *Inverse\e22 = InvDeterminant * Cofactor05
    *Inverse\e32 = -InvDeterminant * Cofactor09
    *Inverse\e42 = InvDeterminant * Cofactor13
    
    *Inverse\e13 = InvDeterminant * Cofactor02
    *Inverse\e23 = -InvDeterminant * Cofactor06
    *Inverse\e33 = InvDeterminant * Cofactor10
    *Inverse\e43 = -InvDeterminant * Cofactor14
    
    *Inverse\e14 = -InvDeterminant * Cofactor03
    *Inverse\e24 = InvDeterminant * Cofactor07
    *Inverse\e34 = -InvDeterminant * Cofactor11
    *Inverse\e44 = InvDeterminant * Cofactor15
    
    If *Success <> #Null
      *Success\i = #True
    EndIf
    
    ProcedureReturn *Inverse
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Translation operator <<<<<
  
  Procedure Translation(*This.Private_Members, Trans_x.f, Trans_y.f, Trans_z.f)
    
    *This\e11 = 1.0
    *This\e12 = 0.0
    *This\e13 = 0.0
    *This\e14 = Trans_x
    
    *This\e21 = 0.0
    *This\e22 = 1.0
    *This\e23 = 0.0
    *This\e24 = Trans_y
    
    *This\e31 = 0.0
    *This\e32 = 0.0
    *This\e33 = 1.0
    *This\e34 = Trans_z
    
    *This\e41 = 0.0
    *This\e42 = 0.0
    *This\e43 = 0.0
    *This\e44 = 1.0
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The TranslationEx operator <<<<<
  
  Procedure TranslationEx(*This.Private_Members, *VectorA.Vector3f::Vector3f)
    
    *This\e11 = 1.0
    *This\e12 = 0.0
    *This\e13 = 0.0
    *This\e14 = *VectorA\GetI()
    
    *This\e21 = 0.0
    *This\e22 = 1.0
    *This\e23 = 0.0
    *This\e24 = *VectorA\GetJ()
    
    *This\e31 = 0.0
    *This\e32 = 0.0
    *This\e33 = 1.0
    *This\e34 = *VectorA\GetK()
    
    *This\e41 = 0.0
    *This\e42 = 0.0
    *This\e43 = 0.0
    *This\e44 = 1.0
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Scale operator <<<<<
  
  Procedure Scale(*This.Private_Members, Scale_x.f, Scale_y.f, Scale_z.f)
    
    *This\e11 = Scale_x
    *This\e12 = 0.0
    *This\e13 = 0.0
    *This\e14 = 0.0
    
    *This\e21 = 0.0
    *This\e22 = Scale_y
    *This\e23 = 0.0
    *This\e24 = 0.0
    
    *This\e31 = 0.0
    *This\e32 = 0.0
    *This\e33 = Scale_z
    *This\e34 = 0.0
    
    *This\e41 = 0.0
    *This\e42 = 0.0
    *This\e43 = 0.0
    *This\e44 = 1.0
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The ScaleEx operator <<<<<
  
  Procedure ScaleEx(*This.Private_Members, *VectorA.Vector3f::Vector3f)
    
    *This\e11 = *VectorA\GetI()
    *This\e12 = 0.0
    *This\e13 = 0.0
    *This\e14 = 0.0
    
    *This\e21 = 0.0
    *This\e22 = *VectorA\GetJ()
    *This\e23 = 0.0
    *This\e24 = 0.0
    
    *This\e31 = 0.0
    *This\e32 = 0.0
    *This\e33 = *VectorA\GetK()
    *This\e34 = 0.0
    
    *This\e41 = 0.0
    *This\e42 = 0.0
    *This\e43 = 0.0
    *This\e44 = 1.0
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The RotateX operator <<<<<
  
  Procedure RotateX(*This.Private_Members, Theta.f)
    
    Protected Cos.f = Cos(Theta)
    Protected Sin.f = Sin(Theta) 
    
    *This\e11 = 1.0
    *This\e12 = 0.0
    *This\e13 = 0.0
    *This\e14 = 0.0
    
    *This\e21 = 0.0
    *This\e22 = Cos
    *This\e23 = -Sin
    *This\e24 = 0.0
    
    *This\e31 = 0.0
    *This\e32 = Sin
    *This\e33 = Cos
    *This\e34 = 0.0
    
    *This\e41 = 0.0
    *This\e42 = 0.0
    *This\e43 = 0.0
    *This\e44 = 1.0
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The RotateY operator <<<<<
  
  Procedure RotateY(*This.Private_Members, Theta.f)
    
    Protected Cos.f = Cos(Theta)
    Protected Sin.f = Sin(Theta) 
    
    *This\e11 = Cos
    *This\e12 = 0.0
    *This\e13 = Sin
    *This\e14 = 0.0
    
    *This\e21 = 0.0
    *This\e22 = 1.0
    *This\e23 = 0.0
    *This\e24 = 0.0
    
    *This\e31 = -Sin
    *This\e32 = 0.0
    *This\e33 = Cos
    *This\e34 = 0.0
    
    *This\e41 = 0.0
    *This\e42 = 0.0
    *This\e43 = 0.0
    *This\e44 = 1.0
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The RotateZ operator <<<<<
  
  Procedure RotateZ(*This.Private_Members, Theta.f)
    
    Protected Cos.f = Cos(Theta)
    Protected Sin.f = Sin(Theta) 

    *This\e11 = Cos
    *This\e12 = -Sin
    *This\e13 = 0.0
    *This\e14 = 0.0
    
    *This\e21 = Sin
    *This\e22 = Cos
    *This\e23 = 0.0
    *This\e24 = 0.0
    
    *This\e31 = 0.0
    *This\e32 = 0.0
    *This\e33 = 1.0
    *This\e34 = 0.0
    
    *This\e41 = 0.0
    *This\e42 = 0.0
    *This\e43 = 0.0
    *This\e44 = 1.0
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Rotation operator <<<<<
  
  Procedure Rotation(*This.Private_Members, *Forward.Vector3f::Vector3f, *Up.Vector3f::Vector3f, *Right.Vector3f::Vector3f)
    
    F.Vector3f::Vector3f = *Forward\Copy()
    U.Vector3f::Vector3f = *Up\Copy()
    R.Vector3f::Vector3f = *Right\Copy()
    
    F\Normalize()
    U\Normalize()
    R\Normalize()
    
    ; [e11, e12, e13, e14] -->  [00, 04, 08, 12] 
    ; [e21, e22, e23, e24] -->  [01, 05, 09, 13]
    ; [e31, e32, e33, e34] -->  [02, 06, 10, 14]
    ; [e41, e42, e43, e44] -->  [03, 07, 11, 15]
      
    *This\e11 = R\GetI()
    *This\e12 = R\GetJ()
    *This\e13 = R\GetK()
    *This\e14 = 0.0
    
    *This\e21 = U\GetI()
    *This\e22 = U\GetJ()
    *This\e23 = U\GetK()
    *This\e24 = 0.0
    
    *This\e31 = F\GetI()
    *This\e32 = F\GetJ()
    *This\e33 = F\GetK()
    *This\e34 = 0.0
    
    *This\e41 = 0.0
    *This\e42 = 0.0
    *This\e43 = 0.0
    *This\e44 = 1.0
    
    F\Free()
    U\Free()
    R\Free()
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The RotationEx operator <<<<<
  
  Procedure RotationEx(*This.Private_Members, *Forward.Vector3f::Vector3f, *Up.Vector3f::Vector3f)
    
    F.Vector3f::Vector3f = *Forward\Copy()
    Up.Vector3f::Vector3f = *Up\Copy()
    
    F\Normalize()
    Up\Normalize()
    
    R.Vector3f::Vector3f = Up\Cross(F)
    R\Normalize()
    
    U.Vector3f::Vector3f = F\Cross(R)
    U\Normalize()
    
    ; [e11, e12, e13, e14] -->  [00, 04, 08, 12] 
    ; [e21, e22, e23, e24] -->  [01, 05, 09, 13]
    ; [e31, e32, e33, e34] -->  [02, 06, 10, 14]
    ; [e41, e42, e43, e44] -->  [03, 07, 11, 15]
    
    *This\e11 = R\GetI()
    *This\e12 = R\GetJ()
    *This\e13 = R\GetK()
    *This\e14 = 0.0
    
    *This\e21 = U\GetI()
    *This\e22 = U\GetJ()
    *This\e23 = U\GetK()
    *This\e24 = 0.0
    
    *This\e31 = F\GetI()
    *This\e32 = F\GetJ()
    *This\e33 = F\GetK()
    *This\e34 = 0.0
    
    *This\e41 = 0.0
    *This\e42 = 0.0
    *This\e43 = 0.0
    *This\e44 = 1.0
    
    F\Free()
    U\Free()
    R\Free()
    Up\Free()
    
  EndProcedure
  CompilerIf Defined(Vector4f, #PB_Module)
    
    ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    ; <<<<< The Product Matrix Vector : R = A * B <<<<<
    
    Procedure.i ProductMatrixVector(*This.Private_Members, *VectorA.Vector4f::Vector4f)
      
      i.f = *This\e11 * *VectorA\GetI() + *This\e12 * *VectorA\GetJ() + *This\e13 * *VectorA\GetK() + *This\e14 * *VectorA\GetL()
      j.f = *This\e21 * *VectorA\GetI() + *This\e22 * *VectorA\GetJ() + *This\e23 * *VectorA\GetK() + *This\e24 * *VectorA\GetL()
      k.f = *This\e31 * *VectorA\GetI() + *This\e32 * *VectorA\GetJ() + *This\e33 * *VectorA\GetK() + *This\e34 * *VectorA\GetL()
      l.f = *This\e41 * *VectorA\GetI() + *This\e42 * *VectorA\GetJ() + *This\e43 * *VectorA\GetK() + *This\e44 * *VectorA\GetL()
      
      ProcedureReturn Vector4f::New(i, j, k, l)
    EndProcedure
    
    ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    ; <<<<< The Product Vector Matrix : R = A * B <<<<<
    
    Procedure.i ProductVectorMatrix(*This.Private_Members, *VectorA.Vector4f::Vector4f)
      
      i.f = *This\e11 * *VectorA\GetI() + *This\e21 * *VectorA\GetJ() + *This\e31 * *VectorA\GetK() + *This\e41 * *VectorA\GetL()
      j.f = *This\e12 * *VectorA\GetI() + *This\e22 * *VectorA\GetJ() + *This\e32 * *VectorA\GetK() + *This\e42 * *VectorA\GetL()
      k.f = *This\e13 * *VectorA\GetI() + *This\e23 * *VectorA\GetJ() + *This\e33 * *VectorA\GetK() + *This\e43 * *VectorA\GetL()
      l.f = *This\e14 * *VectorA\GetI() + *This\e24 * *VectorA\GetJ() + *This\e34 * *VectorA\GetK() + *This\e44 * *VectorA\GetL()
      
      ProcedureReturn Vector4f::New(i, j, k, l)
    EndProcedure
    
    ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    ; <<<<< The ApplyTransformation operator <<<<<
    
    Procedure ApplyTransformation(*This.Private_Members, *NewVector.Vector3f::Vector3f, *Vector.Vector3f::Vector3f, Mode.i = 0)
      
      If Mode = 0 
        VectorHomo.Vector4f::Vector4f = Vector4f::New(*Vector\GetI(), *Vector\GetJ(), *Vector\GetK(), 1.0)
      ElseIf Mode = 1
        VectorHomo.Vector4f::Vector4f = Vector4f::New(*Vector\GetI(), *Vector\GetJ(), *Vector\GetK(), 0.0)
      EndIf
      
      NewVectorHomo.Vector4f::Vector4f = ProductMatrixVector(*This, VectorHomo)
      
      *NewVector\SetI(NewVectorHomo\GetI())
      *NewVector\SetJ(NewVectorHomo\GetJ())
      *NewVector\SetK(NewVectorHomo\GetK())
      
      If Mode = 1
        *NewVector\Normalize()
      EndIf
      
      VectorHomo\Free()
      NewVectorHomo\Free()
      
    EndProcedure
    
  CompilerEndIf
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Perspective operator <<<<<
  
  Procedure Perspective(*This.Private_Members, FOVY.f, Aspect.f, Near.f, Far.f)
    
    Sy.f = 1.0/Tan(FOVY/2.0)
    Sx.f = Sy / Aspect
    
    Sz.f = (Far + Near) / (Near - Far)
    Pz.f = (2.0 * Far * Near) / (Near - Far)
    
    *This\e11 = Sx
    *This\e12 = 0.0
    *This\e13 = 0.0
    *This\e14 = 0.0
    
    *This\e21 = 0.0
    *This\e22 = Sy
    *This\e23 = 0.0
    *This\e24 = 0.0
    
    *This\e31 = 0.0
    *This\e32 = 0.0
    *This\e33 = Sz
    *This\e34 = Pz
    
    *This\e41 = 0.0
    *This\e42 = 0.0
    *This\e43 = -1.0
    *This\e44 = 0.0
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Orthogonal operator <<<<<
  
  Procedure Orthogonal(*This.Private_Members, Left.f, Right.f, Bottom.f, Top.f, Near.f, Far.f)
    
    SetLine1(*This, 2.0 / (Right - Left), 0.0, 0.0, -((Right + Left) / (Right - Left)))
    SetLine2(*This, 0.0, 2.0 / (Top - Bottom), 0.0, -((Top + Bottom) / (Top - Bottom)))
    SetLine3(*This, 0.0, 0.0, -2.0 / (Far - Near), -((Far + Near) / (Far - Near)))
    SetLine4(*This, 0.0, 0.0, 0.0, 1.0)
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Destructor <<<<<

  Procedure Free(*This.Private_Members)
    
    FreeStructure(*This)
    
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Constructor <<<<<

  Procedure.i New(e11.f = 1.0, e21.f = 0.0, e31.f = 0.0, e41.f = 0.0, e12.f = 0.0, e22.f = 1.0, e32.f = 0.0, e42.f = 0.0, e13.f = 0.0, e23.f = 0.0, e33.f = 1.0, e43.f = 0.0, e14.f = 0.0, e24.f = 0.0, e34.f = 0.0, e44.f = 1.0)
    
    *This.Private_Members = AllocateStructure(Private_Members)
    *This\VirtualTable = ?START_METHODS
    
    *This\e11 = e11
    *This\e21 = e21
    *This\e31 = e31
    *This\e41 = e41
    *This\e12 = e12
    *This\e22 = e22
    *This\e32 = e32
    *This\e42 = e42
    *This\e13 = e13
    *This\e23 = e23
    *This\e33 = e33
    *This\e43 = e43
    *This\e14 = e14
    *This\e24 = e24
    *This\e34 = e34
    *This\e44 = e44
    
    ProcedureReturn *This
  EndProcedure
  
  ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ; <<<<< The Virtual Table Entries <<<<<

  DataSection
    START_METHODS:
    Data.i @GetE11()
    Data.i @GetE21()
    Data.i @GetE31()
    Data.i @GetE41()
    Data.i @GetE12()
    Data.i @GetE22()
    Data.i @GetE32()
    Data.i @GetE42()
    Data.i @GetE13()
    Data.i @GetE23()
    Data.i @GetE33()
    Data.i @GetE43()
    Data.i @GetE14()
    Data.i @GetE24()
    Data.i @GetE34()
    Data.i @GetE44()
    Data.i @SetE11()
    Data.i @SetE21()
    Data.i @SetE31()
    Data.i @SetE41()
    Data.i @SetE12()
    Data.i @SetE22()
    Data.i @SetE32()
    Data.i @SetE42()
    Data.i @SetE13()
    Data.i @SetE23()
    Data.i @SetE33()
    Data.i @SetE43()
    Data.i @SetE14()
    Data.i @SetE24()
    Data.i @SetE34()
    Data.i @SetE44()
    Data.i @SetLine1()
    Data.i @SetLine2()
    Data.i @SetLine3()
    Data.i @SetLine4()
    Data.i @Clear()
    Data.i @Access()
    Data.i @Equal()
    Data.i @Plus()
    Data.i @Minus()
    Data.i @Add()
    Data.i @AddScaled()
    Data.i @Subtract()
    Data.i @AddScalar()
    Data.i @SubtractScalar()
    Data.i @ProductByScalar()
    Data.i @DivideByScalar()
    Data.i @Lerp()
    Data.i @Multiply()
    Data.i @Copy()
    Data.i @Compare()
    Data.i @Swapping()
    Data.i @ReadMatrix44f()
    Data.i @WriteMatrix44f()
    Data.i @Identity()
    Data.i @Transpose()
    Data.i @Determinant()
    Data.i @Inverse()
    Data.i @Translation()
    Data.i @TranslationEx()
    Data.i @Scale()
    Data.i @ScaleEx()
    Data.i @RotateX()
    Data.i @RotateY()
    Data.i @RotateZ()
    Data.i @Rotation()
    Data.i @RotationEx()
    
    CompilerIf Defined(Vector4f, #PB_Module)
      Data.i @ProductMatrixVector()
      Data.i @ProductVectorMatrix()
      Data.i @ApplyTransformation()
    CompilerEndIf
    
    Data.i @Perspective()
    Data.i @Orthogonal()
    Data.i @Free()
    END_METHODS:
  EndDataSection
  
EndModule

; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
; <<<<< Code generated in : 00.001 seconds (814000.00 lines/second) <<<<<
; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

; <<<<<<<<<<<<<<<<<<<<<<<
; <<<<< END OF FILE <<<<<
; <<<<<<<<<<<<<<<<<<<<<<<
; IDE Options = PureBasic 6.00 LTS (Linux - x64)
; Folding = ---------------
; EnableXP
; CompileSourceDirectory